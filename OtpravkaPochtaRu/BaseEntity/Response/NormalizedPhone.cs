// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Response.NormalizedPhone;
//
//    var normalizedPhone = NormalizedPhone.FromJson(jsonString);

namespace Response.NormalizedPhone
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NormalizedPhone
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("original-phone", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalPhone { get; set; }

        [JsonProperty("phone-city-code", NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneCityCode { get; set; }

        [JsonProperty("phone-country-code", NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneCountryCode { get; set; }

        [JsonProperty("phone-extension", NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneExtension { get; set; }

        [JsonProperty("phone-number", NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [JsonProperty("quality-code", NullValueHandling = NullValueHandling.Ignore)]
        public string QualityCode { get; set; }
    }

    public partial class NormalizedPhone
    {
        public static NormalizedPhone[] FromJson(string json) => JsonConvert.DeserializeObject<NormalizedPhone[]>(json, Response.NormalizedPhone.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NormalizedPhone[] self) => JsonConvert.SerializeObject(self, Response.NormalizedPhone.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
