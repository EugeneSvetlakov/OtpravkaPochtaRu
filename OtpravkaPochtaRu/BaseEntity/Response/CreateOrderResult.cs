// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OrderResponse;
//
//    var orderResponse = OrderResponse.FromJson(jsonString);

namespace OtpravkaPochtaRu.BaseEntity.Response
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CreateOrderResult
    {
        [JsonProperty("errors", NullValueHandling = NullValueHandling.Ignore)]
        public Error[] Errors { get; set; }

        [JsonProperty("result-ids", NullValueHandling = NullValueHandling.Ignore)]
        public long[] ResultIds { get; set; }
    }

    public partial class Error
    {
        [JsonProperty("error-codes", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorCode[] ErrorCodes { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public long? Position { get; set; }
    }

    public partial class ErrorCode
    {
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
        public string Details { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public long? Position { get; set; }
    }

    public partial class CreateOrderResult
    {
        public static CreateOrderResult FromJson(string json) => JsonConvert.DeserializeObject<CreateOrderResult>(json, OtpravkaPochtaRu.BaseEntity.Response.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CreateOrderResult self) => JsonConvert.SerializeObject(self, OtpravkaPochtaRu.BaseEntity.Response.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
