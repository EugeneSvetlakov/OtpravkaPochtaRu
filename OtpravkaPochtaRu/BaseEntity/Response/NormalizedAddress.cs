// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Response.NormalizedAddress;
//
//    var normalizedAddress = NormalizedAddress.FromJson(jsonString);

namespace Response.NormalizedAddress
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NormalizedAddress
    {
        [JsonProperty("address-type", NullValueHandling = NullValueHandling.Ignore)]
        public string AddressType { get; set; }

        [JsonProperty("area", NullValueHandling = NullValueHandling.Ignore)]
        public string Area { get; set; }

        [JsonProperty("building", NullValueHandling = NullValueHandling.Ignore)]
        public string Building { get; set; }

        [JsonProperty("corpus", NullValueHandling = NullValueHandling.Ignore)]
        public string Corpus { get; set; }

        [JsonProperty("hotel", NullValueHandling = NullValueHandling.Ignore)]
        public string Hotel { get; set; }

        [JsonProperty("house", NullValueHandling = NullValueHandling.Ignore)]
        public string House { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("index", NullValueHandling = NullValueHandling.Ignore)]
        public string Index { get; set; }

        [JsonProperty("letter", NullValueHandling = NullValueHandling.Ignore)]
        public string Letter { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public string Location { get; set; }

        [JsonProperty("num-address-type", NullValueHandling = NullValueHandling.Ignore)]
        public string NumAddressType { get; set; }

        [JsonProperty("original-address", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalAddress { get; set; }

        [JsonProperty("place", NullValueHandling = NullValueHandling.Ignore)]
        public string Place { get; set; }

        [JsonProperty("quality-code", NullValueHandling = NullValueHandling.Ignore)]
        public string QualityCode { get; set; }

        [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
        public string Region { get; set; }

        [JsonProperty("room", NullValueHandling = NullValueHandling.Ignore)]
        public string Room { get; set; }

        [JsonProperty("slash", NullValueHandling = NullValueHandling.Ignore)]
        public string Slash { get; set; }

        [JsonProperty("street", NullValueHandling = NullValueHandling.Ignore)]
        public string Street { get; set; }

        [JsonProperty("validation-code", NullValueHandling = NullValueHandling.Ignore)]
        public string ValidationCode { get; set; }
    }

    public partial class NormalizedAddress
    {
        public static NormalizedAddress[] FromJson(string json) => JsonConvert.DeserializeObject<NormalizedAddress[]>(json, Response.NormalizedAddress.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NormalizedAddress[] self) => JsonConvert.SerializeObject(self, Response.NormalizedAddress.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
