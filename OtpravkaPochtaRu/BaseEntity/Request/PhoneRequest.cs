// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Request.PhoneRequest;
//
//    var phoneRequest = PhoneRequest.FromJson(jsonString);

namespace Request.PhoneRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Класс запрос "Нормализация Телефонного номера"
    /// </summary>
    public partial class PhoneRequest
    {
        /// <summary>
        /// Область/край трелефонного номера (Опционально)
        /// </summary>
        [JsonProperty("area", NullValueHandling = NullValueHandling.Ignore)]
        public string Area { get; set; }

        /// <summary>
        /// Идентификатор записи
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Оригинальные номер одной строкой
        /// </summary>
        [JsonProperty("original-phone", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalPhone { get; set; }

        /// <summary>
        /// Город телефонного номера (Опционально)
        /// </summary>
        [JsonProperty("place", NullValueHandling = NullValueHandling.Ignore)]
        public string Place { get; set; }

        /// <summary>
        /// Регион телефонного номера (Опционально)
        /// </summary>
        [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
        public string Region { get; set; }
    }

    public partial class PhoneRequest
    {
        public static PhoneRequest[] FromJson(string json) => JsonConvert.DeserializeObject<PhoneRequest[]>(json, Request.PhoneRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PhoneRequest[] self) => JsonConvert.SerializeObject(self, Request.PhoneRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
